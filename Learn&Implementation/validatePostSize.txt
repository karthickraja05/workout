Subject: ValidatePostSize

Description:
If user upload large size file php will throw error "Warning: POST Content-Length of 109054690 bytes exceeds the limit of 41943040 bytes" like this..

Implement Method:
Download Below middleware file and move into app/Http/Middleware Folder

ref below code

Add below values inside protected $middleware array
"\App\Http\Middleware\CustomValidatePostSize::class,"
"\Illuminate\Session\Middleware\StartSession::class,"

And Comment(Hide)  below value  inside protected $middleware array
"\Illuminate\Foundation\Http\Middleware\ValidatePostSize::class," 


<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Exceptions\PostTooLargeException;

class CustomValidatePostSize
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     *
     * @throws \Illuminate\Http\Exceptions\PostTooLargeException
     */
    public function handle($request, Closure $next)
    {
        $max = $this->getPostMaxSize();

        // dd(request()->segment(1));
        if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) {
            // Old Method Hided
            // throw new PostTooLargeException;

            ob_get_contents();
            ob_end_clean();

            // Create Custom Validation 
            $segment = request()->segment(1);

            // For Ajax Call
            if(request()->ajax()){
                return response()->json([
                    'status_code' => '0',
                    'status_message' => 'Uplod File Size Too Large',
                ]);
            }

            if($segment == 'api'){
                return response()->json([
                    'status_code' => '0',
                    'status_message' => 'Uplod File Size Too Large',
                ]);
            }else{
                flash_message('danger', 'Uplod File Size Too Large');
                return redirect()->back();
            }

        }

        return $next($request);
    }

    /**
     * Determine the server 'post_max_size' as bytes.
     *
     * @return int
     */
    protected function getPostMaxSize()
    {
        if (is_numeric($postMaxSize = ini_get('post_max_size'))) {
            return (int) $postMaxSize;
        }

        $metric = strtoupper(substr($postMaxSize, -1));
        $postMaxSize = (int) $postMaxSize;

        switch ($metric) {
            case 'K':
                return $postMaxSize * 1024;
            case 'M':
                return $postMaxSize * 1048576;
            case 'G':
                return $postMaxSize * 1073741824;
            default:
                return $postMaxSize;
        }
    }





}
